/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sk.best.newtify.api;

import sk.best.newtify.api.dto.CommentsDTO;
import sk.best.newtify.api.dto.CreateCommentsDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-15T12:20:57.796221600+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Comments", description = "Group of endpoints to handle operations with comments")
public interface CommentsApi {

    /**
     * POST /v1/comments/{aid}
     * This is the endpoint which will create Comment object
     *
     * @param aid  (required)
     * @param createCommentsDTO Data model for comments creation (required)
     * @return Hey, everything went well (status code 201)
     */
    @Operation(
        operationId = "createComment",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Hey, everything went well", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CommentsDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/comments/{aid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CommentsDTO> createComment(
        @Parameter(name = "aid", description = "", required = true) @PathVariable("aid") String aid,
        @Parameter(name = "CreateCommentsDTO", description = "Data model for comments creation", required = true) @Valid @RequestBody CreateCommentsDTO createCommentsDTO
    );


    /**
     * DELETE /v1/comments/{aid}/{cid}
     * Endpoint which can be used to delete article resource specified by articleUuid
     *
     * @param cid Comment resource identifier (required)
     * @param aid Article resource identifier (required)
     * @return Comment was successfully deleted (status code 200)
     *         or Comment not found (status code 404)
     */
    @Operation(
        operationId = "deleteComment",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Comment was successfully deleted"),
            @ApiResponse(responseCode = "404", description = "Comment not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/comments/{aid}/{cid}"
    )
    ResponseEntity<Void> deleteComment(
        @Parameter(name = "cid", description = "Comment resource identifier", required = true) @PathVariable("cid") String cid,
        @Parameter(name = "aid", description = "Article resource identifier", required = true) @PathVariable("aid") String aid
    );


    /**
     * GET /v1/comments/{aid}/{cid}
     * Fetch comment with specified id
     *
     * @param aid  (required)
     * @param cid  (required)
     * @return returns comment with specified id (status code 200)
     */
    @Operation(
        operationId = "getCommentById",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "returns comment with specified id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CommentsDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/comments/{aid}/{cid}",
        produces = { "application/json" }
    )
    ResponseEntity<CommentsDTO> getCommentById(
        @Parameter(name = "aid", description = "", required = true) @PathVariable("aid") String aid,
        @Parameter(name = "cid", description = "", required = true) @PathVariable("cid") String cid
    );


    /**
     * GET /v1/comments/{aid}
     * Fetch comments for specified article
     *
     * @param aid  (required)
     * @return returns detail of comments (status code 200)
     */
    @Operation(
        operationId = "getComments",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "returns detail of comments", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CommentsDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/comments/{aid}",
        produces = { "application/json" }
    )
    ResponseEntity<List<CommentsDTO>> getComments(
        @Parameter(name = "aid", description = "", required = true) @PathVariable("aid") String aid
    );


    /**
     * PUT /v1/comments/{aid}/{cid}
     * Endpoint to update already existing comment specified by commentsUuid
     *
     * @param cid Comment resource identifier (required)
     * @param aid Article resource identifier (required)
     * @param createCommentsDTO Data model with properties which are required for comment update (required)
     * @return Comment was successfully updated (status code 200)
     *         or Comment not found (status code 404)
     */
    @Operation(
        operationId = "updateComment",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Comment was successfully updated"),
            @ApiResponse(responseCode = "404", description = "Comment not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/comments/{aid}/{cid}",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateComment(
        @Parameter(name = "cid", description = "Comment resource identifier", required = true) @PathVariable("cid") String cid,
        @Parameter(name = "aid", description = "Article resource identifier", required = true) @PathVariable("aid") String aid,
        @Parameter(name = "CreateCommentsDTO", description = "Data model with properties which are required for comment update", required = true) @Valid @RequestBody CreateCommentsDTO createCommentsDTO
    );

}
