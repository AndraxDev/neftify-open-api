/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sk.best.newtify.api;

import sk.best.newtify.api.dto.ArticleDTO;
import sk.best.newtify.api.dto.CreateArticleDTO;
import sk.best.newtify.api.dto.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-13T09:34:23.639778300+02:00[Europe/Budapest]")
@Validated
@Tag(name = "Articles", description = "Group of endpoints to handle operations with articles")
public interface ArticlesApi {

    /**
     * POST /v1/articles
     * Create article
     *
     * @param createArticleDTO Data model for article creation (required)
     * @return Article created (status code 201)
     *         or BadRequest (status code 400)
     *         or AccessDenied (status code 403)
     *         or InternalServerError (status code 500)
     */
    @Operation(
        operationId = "createArticle",
        tags = { "articles" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Article created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "BadRequest", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "AccessDenied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "InternalServerError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/articles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ArticleDTO> createArticle(
        @Parameter(name = "CreateArticleDTO", description = "Data model for article creation", required = true) @Valid @RequestBody CreateArticleDTO createArticleDTO
    );


    /**
     * GET /v1/articles/{articleUUid}
     * Get article by id
     *
     * @param articleUUid  (required)
     * @return returns detail of articles (status code 200)
     *         or BadRequest (status code 400)
     *         or AccessDenied (status code 403)
     *         or InternalServerError (status code 500)
     */
    @Operation(
        operationId = "retrieveArticle",
        tags = { "articles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "returns detail of articles", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "BadRequest", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "AccessDenied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "InternalServerError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/articles/{articleUUid}",
        produces = { "application/json" }
    )
    ResponseEntity<ArticleDTO> retrieveArticle(
        @Parameter(name = "articleUUid", description = "", required = true) @PathVariable("articleUUid") String articleUUid
    );


    /**
     * GET /v1/articles
     * Query all articles
     *
     * @param topic Used to filter articles by topic (optional)
     * @return It will return lst of articles either by topic (status code 200)
     */
    @Operation(
        operationId = "retrieveArticles",
        tags = { "articles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "It will return lst of articles either by topic", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/articles",
        produces = { "application/json" }
    )
    ResponseEntity<List<ArticleDTO>> retrieveArticles(
        @Parameter(name = "topic", description = "Used to filter articles by topic") @Valid @RequestParam(value = "topic", required = false) String topic
    );

}
